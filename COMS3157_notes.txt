  1 -------------------------------------------------------------------------------
  2 January 28, 2020
  3 ----------------
  4 
  5 #include <stdio.h> is NOT including library code (does not include code for
  6 printf())
  7 
  8 libc.a is the standard library file
  9 
 10 gcc <linking files> -o <executable file> -lc : This links with library code
 11 For lab1, we will be linking with math library #include <math.h>
 12 Instead of -lc, use -lm
 13 
 14 Don't forget cat <filename> command to view code instead of having to use
 15 vim
 16 
 17 gcc -Wall -c  <files> to check for all warnings
 18 
 19 Mismatch in parameters will not cause an error in compiling and linking
 20 
 21 gcc -Wall -c problem_file will not compile
 22 
 23 make is a program that looks for a file in cd called "Makefile". Makefile
 24 
 25 cat -t Makefile : replaces cat with ^I
 26 
 27 cat -tn Makefile : by lines
 28 
 29 rm *.o main
 30 
 31 -------------------------------------------------------------------------------
 32 February 4, 2020
 33 ----------------
 34 
 35 #include "myadd.h"
 36 -instead of that line, include the contents of file myadd.h
 37 
 38 #define PI 3.14
 39 -all "PI" replaced by "3.14" then program compiled
 40 
 41 #define SQR(x)  x*x
 42 -SQR(3) would be replaced by 3*3
 43 -not really a function, just works as a search and replace
 44 -SQR(2+3) would be replaced by 2+3*2+3 which would be 11 instead of the desired
 45 result of 25
 46 
 47 In macros put parentheses everywhere
 48 
 49 #define SQR(x)  ((x) * (x))
 50 - this would work
 51 
 52 CONTENT of myadd.h
 53 
 54 #ifndef _MYADD_H_
 55 #define _MYADD_H_
 56 int myadd(int, int, int);
 57 #endif
 58 
 59 /* Notes deleted by accident. Check jae's notes online for complete set*/
 60 -------------------------------------------------------------------------------
 61 February 6, 2020
 62 ----------------
 63 
 64 Types of Variables
 65 -----------------
 66 
 67 1) automatic variables
 68 - stack variables
 69 2) static
 70 - global
 71 - file
 72 -function
 73 
 74 RAM
 75 
 76 Process Address Space
 77 ---------------------
 78 
 79 -Each process gets 512GB of memory space
 80 -when a certain thing in memory is accessed, it is mapped to somewhere in
 81 the 16GB RAM
 82 -each process itself thinks its the only thing running
 83 
 84         operating system
 85           code & data
 86  512G ---------------------
 87              stack
 88       ---------------------
 89                |
 90                V
 91 
 92                ^
 93                |
 94       ---------------------
 95               heap
 96       ---------------------
 97         static variables
 98       ---------------------
 99          program code
100     0 ---------------------
101 
102 stack will grow down
103 -like an upside down stack
104 -push to bottom, pop from bottom
105 -functions can override spaces if the stack rolls up to variables that are
106 not at the bottom
107 
108 Ex
109 --
110 f(){
111   int a, b;
112   h();
113   a= b+2;
114   h2();
115 }
116 
117 h()
118 {
119   int c, d;
120 }
121 
122 h2()
123 {
124   int e, f;
125 }
126 
127 stack will be
128 
129 [a,b,c,d] --> [a,b, (c), (d)] --> [a,b,e,f]
130 
131 c,d get override b/c a= b+2 causes the stack to roll up to elements 0 and 1
132 
133 Pointers!
134 ---------
135 -the real meat of the C language
136 -REFER to lectures notes 4
137 -THE FOLLOWING DIAGRAMS ARE IN DIRECT RELATION TO LECTURE NOTES
138 
139 2000   |------
140        |x = 1
141        |------
142 
143 
144 
145 
146 int *p is a pointer
147 int * - pointer/address to int
148 p is the variable in this case
149 
150 foo()
151 {
152   int x = 1, y = 2;
153   int *p;   // p is a pointer
154   p = &x;   // p holds the address of an int variable
155   y = *p;   // y = 1 now     y = *p basically equivalent to y = x
156   *p = 0;   // putting 0 into x  in general, putting 0 into what p points to
157   p = &y    // p now points to y
158   *p = 2    // y now equals 2
159   ++*p;     // y incremented by 1 so y = 3
160   (*p)++;   // y incremented by 1 so y = 4 now parentheses means *(p++)
161 }
162 
163 some()
164 {
165   int i = 1234;
166   double d = 3.14;
167   int *pi = &i;
168   double *pd = &d;
169   pi = pd    // compiler error because incompatible types (int* vs double*)
170   pi = (int *)pd  // compiles because changing type
171   int x = *pi;
172   void *pv = pd;  // void *  can have any type
173   *pv = 30;       // not allowed because you dont know bytes
174   *(double *)pv = 30; // dereference so now it works
175 }
176 
177 Null Pointer
178 ------------
179 
180   int *pi = 0;
181   pi = NULL; // C provides #define NULL 0
182 
183 --------------
184 
185   int x = 0;
186   int *p = &x;
187 
188   if(x) { //false because x = 0
189   if(p) { //true b/c p is not 0
190   if(*p) { // false b/c *p is 0
191 
192   *p = 0;
193 
194   if(p) { // false because *p is 0
195   if(*p) //would  crash program
196 
197 -------------------------------------------------------------------------------
198 February 11, 2020
199 -----------------
200 
201 -goal is to quickly cover what we need for lab2
202 -will come back to it later
203 
204 {
205   int x;
206   int a[10];
207   a[0] = 100;
208   x = a[0];
209   int *p = &a[0]; //same as int *p = &(a[0])
210   printf("%d", sizeof(a[0])); // 4
211   .............sizeof(a) // 40
212   .............sizeof(p) // 8
213   .............sizeof(&a[0]) // 8
214   .............:w
215   sizeof(*p) // 4
216 }
217 
218 *p <=> a[0]
219 *&a[0] <=> a[0]
220 p = p + 1; //p would become 2004 from 2000(assuming 2000 is memory location
221            //for a[0]) and would now point to a[1]
222 
223 *p <=> a[1]
224 *(p + 1)  <=> a[2]
225 --------------------------------
226 |Thm 1                         |
227 |-----                         |
228 |*(p+i) <=> a[i] if *p = &a[0] |
229 --------------------------------
230 int *p = &a[0];
231 for (int i = 0; i < 10; i++){
232   //printf("%d", a[i]);
233   //.............*(p+i));
234   printf("%d", *p);
235   p++;
236   //p holds address a[10] at the end which does not exists but its ok b/c
237   //doesnt attempt
238   // would rather put printf("%d", *p++);
239   // *p++ <=> *(p++)
240 }
241 -------------------
242 |Thm 2            |
243 |-----            |
244 |a <=> &a[0]      |
245 -------------------
246 
247 *(a+1) <=> *(&a[0] + 1) <=> *(p+1)
248 
249 p[1] <=> &a[0][1] <=> a[1]
250 
251 ----------------------------------
252 |Thm 3 (GUT of Pointers & Array) |
253 |-----                           |
254 | a[i] <=> *(u+i)                |
255 ----------------------------------
256 
257 a[5] <=> *(a+5) <=> *(5+a) <=> 5[a] (!!!!)
258 
259 -cannot do a++ because a is not a variable
260 
261 Heap
262 ----
263 int *foo()
264 {
265   int a[10];
266   int *p = a;
267   int *q = malloc(40);
268   //malloc returns void * because memory it allocates can be used for
269   anything
270   //in this case we cast(?) void * to int *
271   // can't return *p
272   return q;
273 }
274 
275 Char Array + String Literals
276 ---------------------------
277 {
278   char c[4] = {97, 98, 99, 0};
279   <=>
280   char c[4] = {'a', 'b', 'c', '\0'} //single quote char is number
281   <=>
282   char c[4] = "abc";
283 }
284 
285 char c[4] = "abc";
286 char *p;
287 p = "abc";
288 char[0] => char *
289 
290 //not all char arrays have to have 0 at the end
291 // char c[2] = {1,2} is valid
292 // by convention, c treats a char array with 0 at the end as a string
293 // *("abc" + 1) <=> 98
294 // it would reference the second element because it turns into char *
295 -------------------------------------------------------------------------------
296 February 13, 2020
297 -----------------
298 *copy over notes from Justin*
299 
300 
301 -------------------------------------------------------------------------------
302 February 18, 2020
303 -----------------
304 -Midterm 1 covers everything up to Lecture on 2/20 but not lab3 material
305 
306 const keyword
307 -------------
308 
309 {
310   const char *p;
311   char x = 'A';
312   p = &x;
313   printf("%c", *p);
314   *p = 'a'; //will result in compilation error
315   // cannot change what p is pointing to
316   x = 'a'; // this is fine
317   *(char *)p = 'a'; //this is legal because you dereference const
318   p = NULL;
319 }
320 
321 Pointer to functions
322 --------------------
323 -qsort
324 -size_t can be thought of as unsigned int
325 typedef int MyInt;
326 -the type of f in qsort is int(*)(const void *, const void *)
327 -so, f is a pointer to a function
328 qsort(pointer to first array, num elements, byte size of each element,
329 pointer to comparing function);
330 int main()
331 {
332   int a[5] = {-37, -30, 25, 10, 137};
333   qsort(a, sizeof(a)/sizeof(*a), sizeof(*a), &myFunc);
334   // remember *a <=> a[0]
335 }
336 
337 int myFunc(const void *a, const void *b)
338 {
339   int *p = a;
340   int *q = b;
341   int x = *p;
342   int y = *q;
343   if (x < y)
344     return -1;
345   else if (y < x)
346     return 1;
347   else
348     return 0;
349   //return *(int *)a - *(int *)b also works
350   //you dereference it right away and then can subtract
351 }
352 
353 foo()
354 {
355   int x;
356   int (*f1)(void *); // declaration of variable of type int(*)(void *)
357   int *f2(void *); // declaration of a function f2 that takes in void * and
358   //returns int*
359   int (*f3[5])(void *); //f3 is an array of length 5 where each element is
360   //of type int(*)(void *)
361 }
362 
363 int *f2(void *) <=> (int *)f2(void *) //conceptually not literally
364 
365 To decode:
366 1. First identify name
367 2. Spiral out counterclockwise
368 
369 Ex
370 --
371 for f3 you see it as an array of 5 elements first, then you see that each
372 element is a pointer. You then see that each element is a pointer to
373 function that takes void * and returns int. Conclusion: f3 is an array of 5
374 pointers to function that takes void * and returns int.
375 
376 Ex
377 --
378 char *a[3];
379 
380 a is an array of 3 pointers to char.
381 
382 char *a[3] = {"abc", "def", "xyz"};
383 char **p = a;
384 
385 -More examples in Lecture notes 7 (look at them!)
386 
387 Struct
388 ------
389 
390 struct pt {
391   double x;
392   double y;
393 };
394 
395 //This it like class in java but no methods
396 
397 int foo()
398 {
399   double a;
400   struct pt p1;
401   //struct pt is now a new type
402   //struct pt is 16 bytes because it contains two doubles
403   //sometimes the size of struct is bigger than sum of parts
404   //depends on the system you're running it on
405   struct pt p2 = {1.0, 2.0};
406   a = p2.x;
407   struct pt *q = &p2;
408   (*q).y = 4.0;
409   // . binds more tightly than * so thats the reason for parentheses
410   q -> y = 4.0;
411   // (*q).y = 4.0 <==> q -> y = 4.0;
412   //arrow operates from pointer to structure
413   // dot operates on the structure itself
414   double *q2 = &p2.x;
415   //q2 and q would have the same address but the difference is type
416 }
417 
418 
419 ---
420 
421 struct pt p3[1];
422 p3 -> x = 2.0;
423 //by using this syntax, you can then use p3 as a pointer
424 
425 -------------------------------------------------------------------------------
426 February 20, 2020
427 -----------------
428 - Midterm on Tuesday 2/25
429 - Mock exam tmrw
430 - exam will cover linked list and other materials from today
431 - "if you pick multiple answers, we will pick the one that results in the
432 lowest grade"
433 
434 Linked List in C
435 ----------------
436 struct Node *create2Nodes(int v1, int v2)
437 {
438   struct Node *head = NULL;
439   struct Node *n2 = malloc(sizeof(struct Node));
440   n2->next = head;
441   n1->val = v2;
442   head = n2;
443   struct Node *n1 = malloc(sizeof(struct Node));
444   n1->next = head;
445   n1->val = v1;
446   head = n1;
447   return head;
448 }
449 
450 struct Node {
451   struct Node *next;
452   int val;
453 };
454 
455 int main()
456 {
457   struct Node *list = create2NOdes(100, 200);
458   struct Node *node = list;
459   while(node){
460     printf("%d", node->val);
461     node = node->next;
462   }
463   free(list->next);
464   free(list);
465 }
466 
467 Node
468 --------        ---------         ---------
469 |      |------> |       |-------> |   0   |
470 |      |        ---------         ---------
471 --------        |  100  |         |  200  |
472                 ---------         ---------
473 
474 - free them in reverse order because of pointers
475 - if you free the first one for example, theres no way you can reach the
476   second node in order to free it
477 
478 Standard I/O
479 ------------
480 
481 ./a.out > out
482 - output redirects to file "out" instead of screen
483 
484 ./a.out < input
485 - instead of prompting for user input, a.out reads file "input" as the input
486   to the program
487 
488 ./a.out < input > out
489 - overwrites file out with output
490 
491 ./a.out < input >> out
492 - appends output to file out instead of overwrite
493 
494 3 I/O Channels
495 - standard input
496 - standard output
497 - standard error
498 
499 for example, output from valgrind is directed to standard error
500 (valgrind command) ./a.out 2> err
501 - this would redirect error message to file err
